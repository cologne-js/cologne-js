// Generated by CoffeeScript 1.3.3
"use strict";

var XRegExp, cache, calendarId, date, fs, gcal, getContent, getContentSnippets, getEvents, markdown, yaml, __appdir, __contentdir,
  _this = this,
  __hasProp = {}.hasOwnProperty;

__appdir = require('path').join(__dirname, '..');

__contentdir = "" + __appdir + "/content";

calendarId = '6gg9b82umvrktnjsfvegq1tb24';

gcal = require('../lib/googlecalendar.js').GoogleCalendar(calendarId);

date = require('../lib/date.js');

XRegExp = require('xregexp').XRegExp;

markdown = require('node-markdown').Markdown;

fs = require('fs');

yaml = require('js-yaml');

cache = void 0;

getEvents = function(callback) {
  var gcalOptions;
  gcalOptions = {
    'futureevents': true,
    'orderby': 'starttime',
    'sortorder': 'ascending',
    'fields': 'items(details)',
    'max-results': 1
  };
  return gcal.getJSON(gcalOptions, function(err, data) {
    var events, foo, item, markdown_talk1, markdown_talk2, parts, regex, talk1, talk2, talks, _i, _len, _ref, _ref1;
    if (data && data.length) {
      events = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        regex = XRegExp('Wann:.*?(?<day>\\d{1,2})\\. (?<month>\\w+)\\.? (?<year>\\d{4})');
        parts = XRegExp.exec(item.details, regex);
        foo = date.convert(parts.year, parts.month, parts.day);
        talks = XRegExp.exec(item.details, XRegExp('Terminbeschreibung: (.*)', 's'));
        if (talks && talks[1]) {
          _ref = talks[1].split('---'), talk1 = _ref[0], talk2 = _ref[1];
        } else {
          _ref1 = ['', ''], talk1 = _ref1[0], talk2 = _ref1[1];
        }
        try {
          markdown_talk1 = markdown(talk1);
        } catch (error) {
          console.log('Error parsing talk 1 as Markdown: \n\t' + talk1);
          markdown_talk1 = talk1;
        }
        try {
          markdown_talk2 = markdown(talk2);
        } catch (error) {
          console.log('Error parsing talk 2 as Markdown: \n\t' + talk2);
          markdown_talk2 = talk2;
        }
        events.push({
          date: date.format(foo, "%b %%o, %Y"),
          talk1: markdown_talk1,
          talk2: markdown_talk2
        });
      }
      return callback(null, events);
    } else {
      return callback(new Error('Could not load events from Google Calendar'));
    }
  });
};

getContentSnippets = function(view, callback) {
  var dir, results;
  results = [];
  dir = "" + __contentdir + "/" + view;
  return fs.readdir(dir, function(err, list) {
    var pending;
    if (err) {
      return callback(err);
    }
    pending = list.length;
    if (!pending) {
      return callback(null, results.sort());
    }
    return list.forEach(function(file) {
      var fileFullName;
      fileFullName = "" + dir + "/" + file;
      return fs.stat(fileFullName, function(err, stat) {
        if (stat && stat.isFile()) {
          results.push(file);
        }
        if (!--pending) {
          return callback(null, results.sort());
        }
      });
    });
  });
};

getContent = function(view, callback) {
  return getContentSnippets(view, function(err, result) {
    var content;
    if (err) {
      callback(err);
    }
    content = {};
    result.forEach(function(file) {
      try {
        return content[file.replace(/\.yml/, '')] = yaml.load(fs.readFileSync("" + __contentdir + "/" + view + "/" + file, 'utf-8'));
      } catch (error) {

      }
    });
    return callback(null, content);
  });
};

exports.init = function(app) {
  return cache = require('../lib/pico.js').Pico(app.settings.cacheInSeconds);
};

exports.index = function(req, res) {
  var content;
  content = cache.get('websiteContent');
  if (content) {
    return res.render('index', content);
  } else {
    return getEvents(function(err, data) {
      if (data) {
        content = {
          'events': data
        };
        cache.set('websiteContent', content);
      } else {
        console.log(err);
      }
      return res.render('index', content);
    });
  }
};

exports.about = function(req, res) {
  return res.render('about');
};

exports.talks = function(req, res) {
  return getContent('talks', function(err, data) {
    var month, months, selectedYear, talk, year, _i, _j, _len, _len1, _ref;
    selectedYear = String(req.params[0] || (new Date()).getFullYear());
    if (err) {
      console.log(err);
    }
    if (err || !data.hasOwnProperty(selectedYear)) {
      exports.e404(req, res);
      return;
    }
    for (year in data) {
      if (!__hasProp.call(data, year)) continue;
      months = data[year];
      for (_i = 0, _len = months.length; _i < _len; _i++) {
        month = months[_i];
        _ref = month.talks;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          talk = _ref[_j];
          if (talk.description) {
            talk.description = markdown(talk.description);
          }
        }
      }
    }
    return res.render('talks', {
      'title': "Talks " + selectedYear,
      'years': ((function() {
        var _results;
        _results = [];
        for (year in data) {
          if (!__hasProp.call(data, year)) continue;
          _results.push(String(year));
        }
        return _results;
      })()).reverse(),
      'selectedYear': selectedYear,
      'content': data
    });
  });
};

exports.ical = function(req, res) {
  return res.redirect(gcal.getICalUrl());
};

exports.e404 = function(req, res) {
  res.status(404);
  return res.render('404');
};
